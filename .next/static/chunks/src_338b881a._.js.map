{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/game-state.ts"],"sourcesContent":["export interface Token {\n  id: number;\n  color: PlayerColor;\n  position: number;\n  isHome: boolean;\n  isSafe: boolean;\n}\n\nexport interface Player {\n  id: number;\n  color: PlayerColor;\n  name: string;\n  tokens: Token[];\n  isCurrent: boolean;\n}\n\nexport type PlayerColor = 'red' | 'blue' | 'green' | 'yellow';\n\nexport interface GameState {\n  players: Player[];\n  currentPlayerIndex: number;\n  diceValue: number;\n  isRolling: boolean;\n  gameStarted: boolean;\n  winner: PlayerColor | null;\n}\n\nexport const PLAYER_COLORS: PlayerColor[] = ['red', 'blue', 'green', 'yellow'];\nexport const TOKEN_COUNT = 4;\nexport const BOARD_SIZE = 52;\nexport const HOME_STRETCH_SIZE = 6;\n\nexport const createInitialGameState = (): GameState => ({\n  players: PLAYER_COLORS.map((color, index) => ({\n    id: index,\n    color,\n    name: color.charAt(0).toUpperCase() + color.slice(1),\n    tokens: Array.from({ length: TOKEN_COUNT }, (_, i) => ({\n      id: i,\n      color,\n      position: -1,\n      isHome: false,\n      isSafe: false,\n    })),\n    isCurrent: index === 0,\n  })),\n  currentPlayerIndex: 0,\n  diceValue: 0,\n  isRolling: false,\n  gameStarted: false,\n  winner: null,\n});\n\nexport const isSafePosition = (position: number): boolean => {\n  const safePositions = [0, 8, 13, 21, 26, 34, 39, 47];\n  return safePositions.includes(position);\n};\n\nexport const canMoveToken = (token: Token, diceValue: number): boolean => {\n  if (token.isHome) return false;\n  if (token.position === -1 && diceValue !== 6) return false;\n  return true;\n};\n\nexport const getNextPosition = (\n  currentPosition: number,\n  diceValue: number,\n  playerColor: PlayerColor\n): number => {\n  if (currentPosition === -1 && diceValue === 6) return 0;\n  if (currentPosition === -1) return -1;\n  \n  const nextPosition = (currentPosition + diceValue) % BOARD_SIZE;\n  return nextPosition;\n};\n"],"names":[],"mappings":";;;;;;;;;;AA2BO,MAAM,gBAA+B;IAAC;IAAO;IAAQ;IAAS;CAAS;AACvE,MAAM,cAAc;AACpB,MAAM,aAAa;AACnB,MAAM,oBAAoB;AAE1B,MAAM,yBAAyB,IAAiB,CAAC;QACtD,SAAS,cAAc,GAAG,CAAC,CAAC,OAAO,QAAU,CAAC;gBAC5C,IAAI;gBACJ;gBACA,MAAM,MAAM,MAAM,CAAC,GAAG,WAAW,KAAK,MAAM,KAAK,CAAC;gBAClD,QAAQ,MAAM,IAAI,CAAC;oBAAE,QAAQ;gBAAY,GAAG,CAAC,GAAG,IAAM,CAAC;wBACrD,IAAI;wBACJ;wBACA,UAAU,CAAC;wBACX,QAAQ;wBACR,QAAQ;oBACV,CAAC;gBACD,WAAW,UAAU;YACvB,CAAC;QACD,oBAAoB;QACpB,WAAW;QACX,WAAW;QACX,aAAa;QACb,QAAQ;IACV,CAAC;AAEM,MAAM,iBAAiB,CAAC;IAC7B,MAAM,gBAAgB;QAAC;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;QAAI;KAAG;IACpD,OAAO,cAAc,QAAQ,CAAC;AAChC;AAEO,MAAM,eAAe,CAAC,OAAc;IACzC,IAAI,MAAM,MAAM,EAAE,OAAO;IACzB,IAAI,MAAM,QAAQ,KAAK,CAAC,KAAK,cAAc,GAAG,OAAO;IACrD,OAAO;AACT;AAEO,MAAM,kBAAkB,CAC7B,iBACA,WACA;IAEA,IAAI,oBAAoB,CAAC,KAAK,cAAc,GAAG,OAAO;IACtD,IAAI,oBAAoB,CAAC,GAAG,OAAO,CAAC;IAEpC,MAAM,eAAe,CAAC,kBAAkB,SAAS,IAAI;IACrD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/hooks/use-ludo-game.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport {\n  GameState,\n  createInitialGameState,\n  canMoveToken,\n  getNextPosition,\n  isSafePosition,\n  PlayerColor,\n  BOARD_SIZE,\n} from '@/lib/game-state';\n\nexport function useLudoGame() {\n  const [gameState, setGameState] = useState<GameState>(createInitialGameState());\n  const [selectedToken, setSelectedToken] = useState<{ playerId: number; tokenId: number } | null>(null);\n\n  const rollDice = useCallback(() => {\n    if (gameState.isRolling || gameState.winner) return;\n\n    setGameState(prev => ({ ...prev, isRolling: true }));\n    \n    setTimeout(() => {\n      const diceValue = Math.floor(Math.random() * 6) + 1;\n      setGameState(prev => ({\n        ...prev,\n        diceValue,\n        isRolling: false,\n        gameStarted: true,\n      }));\n      \n      // Check for valid moves after a short delay\n      setTimeout(() => {\n        setGameState(current => {\n          const currentPlayer = current.players[current.currentPlayerIndex];\n          const hasValidMoves = currentPlayer.tokens.some(token => canMoveToken(token, diceValue));\n          \n          // If no valid moves, automatically move to next player after showing the result\n          if (!hasValidMoves) {\n            return {\n              ...current,\n              currentPlayerIndex: (current.currentPlayerIndex + 1) % current.players.length,\n              diceValue: 0,\n            };\n          }\n          \n          return current;\n        });\n      }, 2000); // Show \"No valid moves\" for 2 seconds before moving to next player\n    }, 1000);\n  }, [gameState.isRolling, gameState.winner]);\n\n  const getMovableTokens = useCallback(() => {\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    if (!currentPlayer || gameState.diceValue === 0) return [];\n\n    return currentPlayer.tokens\n      .filter(token => canMoveToken(token, gameState.diceValue))\n      .map(token => ({ playerId: currentPlayer.id, tokenId: token.id }));\n  }, [gameState.players, gameState.currentPlayerIndex, gameState.diceValue]);\n\n  const moveToken = useCallback((playerId: number, tokenId: number) => {\n    const player = gameState.players.find(p => p.id === playerId);\n    const token = player?.tokens.find(t => t.id === tokenId);\n    \n    if (!player || !token || !canMoveToken(token, gameState.diceValue)) return;\n\n    setGameState(prev => {\n      const newState = { ...prev };\n      const newPlayers = [...newState.players];\n      const playerIndex = newPlayers.findIndex(p => p.id === playerId);\n      const newPlayer = { ...newPlayers[playerIndex] };\n      const newTokens = [...newPlayer.tokens];\n      const tokenIndex = newTokens.findIndex(t => t.id === tokenId);\n      const newToken = { ...newTokens[tokenIndex] };\n\n      // Calculate new position\n      const newPosition = getNextPosition(newToken.position, newState.diceValue, newToken.color);\n      \n      // Handle token entering the board\n      if (newToken.position === -1 && newState.diceValue === 6) {\n        newToken.position = getStartPosition(newToken.color);\n      } else if (newToken.position >= 0) {\n        // Handle normal movement\n        const targetPosition = (newToken.position + newState.diceValue) % BOARD_SIZE;\n        \n        // Check if token reaches home stretch\n        if (shouldEnterHomeStretch(newToken.position, newState.diceValue, newToken.color)) {\n          const homeStretchStart = 52 + (playerId * 6);\n          const stepsIntoHomeStretch = (newToken.position + newState.diceValue) - getHomeStretchEntryPosition(newToken.color);\n          newToken.position = homeStretchStart + stepsIntoHomeStretch;\n          \n          // Check if token reaches home\n          if (newToken.position >= homeStretchStart + 6) {\n            newToken.isHome = true;\n            newToken.position = homeStretchStart + 5; // Final position\n          }\n        } else {\n          newToken.position = targetPosition;\n        }\n      }\n\n      // Update token safety status\n      newToken.isSafe = isSafePosition(newToken.position);\n\n      // Handle capturing opponent tokens\n      if (!newToken.isSafe && newToken.position >= 0 && newToken.position < BOARD_SIZE) {\n        newPlayers.forEach((otherPlayer, otherPlayerIndex) => {\n          if (otherPlayer.id !== playerId) {\n            otherPlayer.tokens.forEach((otherToken, otherTokenIndex) => {\n              if (otherToken.position === newToken.position && !otherToken.isSafe) {\n                newPlayers[otherPlayerIndex] = {\n                  ...otherPlayer,\n                  tokens: otherPlayer.tokens.map((t, i) =>\n                    i === otherTokenIndex ? { ...t, position: -1, isSafe: false } : t\n                  ),\n                };\n              }\n            });\n          }\n        });\n      }\n\n      // Update the moved token\n      newTokens[tokenIndex] = newToken;\n      newPlayer.tokens = newTokens;\n      newPlayers[playerIndex] = newPlayer;\n\n      // Check for winner\n      const winner = checkWinner(newPlayers);\n      \n      // Determine next player (stay if rolled 6 or captured, otherwise next player)\n      let nextPlayerIndex = newState.currentPlayerIndex;\n      if (newState.diceValue !== 6) {\n        nextPlayerIndex = (newState.currentPlayerIndex + 1) % newPlayers.length;\n      }\n\n      return {\n        ...newState,\n        players: newPlayers,\n        currentPlayerIndex: nextPlayerIndex,\n        diceValue: 0,\n        winner,\n      };\n    });\n\n    setSelectedToken(null);\n  }, [gameState]);\n\n  const getStartPosition = (color: PlayerColor): number => {\n    const startPositions = { red: 1, blue: 14, green: 27, yellow: 40 };\n    return startPositions[color];\n  };\n\n  const getHomeStretchEntryPosition = (color: PlayerColor): number => {\n    const entryPositions = { red: 51, blue: 12, green: 25, yellow: 38 };\n    return entryPositions[color];\n  };\n\n  const shouldEnterHomeStretch = (currentPosition: number, diceValue: number, color: PlayerColor): boolean => {\n    const entryPosition = getHomeStretchEntryPosition(color);\n    const newPosition = currentPosition + diceValue;\n    return currentPosition < entryPosition && newPosition >= entryPosition;\n  };\n\n  const checkWinner = (players: typeof gameState.players): PlayerColor | null => {\n    for (const player of players) {\n      if (player.tokens.every(token => token.isHome)) {\n        return player.color;\n      }\n    }\n    return null;\n  };\n\n  const resetGame = useCallback(() => {\n    setGameState(createInitialGameState());\n    setSelectedToken(null);\n  }, []);\n\n  const handleTokenClick = useCallback((playerId: number, tokenId: number) => {\n    if (gameState.currentPlayerIndex !== playerId || gameState.diceValue === 0) return;\n    \n    const movableTokens = getMovableTokens();\n    const isMovable = movableTokens.some(mt => mt.playerId === playerId && mt.tokenId === tokenId);\n    \n    if (isMovable) {\n      if (selectedToken?.playerId === playerId && selectedToken?.tokenId === tokenId) {\n        // Move the selected token\n        moveToken(playerId, tokenId);\n      } else {\n        // Select the token\n        setSelectedToken({ playerId, tokenId });\n      }\n    }\n  }, [gameState.currentPlayerIndex, gameState.diceValue, getMovableTokens, moveToken, selectedToken]);\n\n  return {\n    gameState,\n    selectedToken,\n    movableTokens: getMovableTokens(),\n    rollDice,\n    handleTokenClick,\n    resetGame,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/token.tsx"],"sourcesContent":["'use client';\n\nimport { Token as TokenType, PlayerColor } from '@/lib/game-state';\nimport { cn } from '@/lib/utils';\n\ninterface TokenProps {\n  token: TokenType;\n  onClick?: () => void;\n  isSelected?: boolean;\n  isMovable?: boolean;\n}\n\nconst colorClasses: Record<PlayerColor, string> = {\n  red: 'bg-red-500 border-red-700',\n  blue: 'bg-blue-500 border-blue-700',\n  green: 'bg-green-500 border-green-700',\n  yellow: 'bg-yellow-500 border-yellow-700',\n};\n\nexport function Token({ token, onClick, isSelected, isMovable }: TokenProps) {\n  return (\n    <button\n      onClick={onClick}\n      disabled={!isMovable}\n      className={cn(\n        'w-8 h-8 rounded-full border-2 transition-all duration-200',\n        'hover:scale-110 active:scale-95',\n        'disabled:opacity-50 disabled:cursor-not-allowed',\n        colorClasses[token.color],\n        isSelected && 'ring-2 ring-white ring-offset-2 ring-offset-gray-800',\n        isMovable && 'cursor-pointer hover:shadow-lg'\n      )}\n      aria-label={`${token.color} token ${token.id + 1}`}\n    >\n      <span className=\"text-white text-xs font-bold\">{token.id + 1}</span>\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAYA,MAAM,eAA4C;IAChD,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;AACV;AAEO,SAAS,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAc;IACzE,qBACE,6LAAC;QACC,SAAS;QACT,UAAU,CAAC;QACX,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,6DACA,mCACA,mDACA,YAAY,CAAC,MAAM,KAAK,CAAC,EACzB,cAAc,wDACd,aAAa;QAEf,cAAY,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,GAAG;kBAElD,cAAA,6LAAC;YAAK,WAAU;sBAAgC,MAAM,EAAE,GAAG;;;;;;;;;;;AAGjE;KAlBgB","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ludo-board.tsx"],"sourcesContent":["'use client';\n\nimport { Player, Token as TokenType, PlayerColor } from '@/lib/game-state';\nimport { Token } from './token';\nimport { cn } from '@/lib/utils';\n\ninterface LudoBoardProps {\n  players: Player[];\n  onTokenClick: (playerId: number, tokenId: number) => void;\n  selectedToken?: { playerId: number; tokenId: number } | null;\n  movableTokens: Array<{ playerId: number; tokenId: number }>;\n}\n\nconst playerColors: Record<PlayerColor, string> = {\n  red: 'bg-red-100 border-red-300',\n  blue: 'bg-blue-100 border-blue-300',\n  green: 'bg-green-100 border-green-300',\n  yellow: 'bg-yellow-100 border-yellow-300',\n};\n\nconst homeColors: Record<PlayerColor, string> = {\n  red: 'bg-red-200',\n  blue: 'bg-blue-200',\n  green: 'bg-green-200',\n  yellow: 'bg-yellow-200',\n};\n\nexport function LudoBoard({ players, onTokenClick, selectedToken, movableTokens }: LudoBoardProps) {\n  const renderHomeArea = (color: PlayerColor, position: string) => {\n    const player = players.find(p => p.color === color);\n    if (!player) return null;\n\n    const homeTokens = player.tokens.filter(token => token.position === -1);\n\n    return (\n      <div className={cn(\n        'w-24 h-24 border-2 rounded-lg p-2',\n        homeColors[color],\n        playerColors[color]\n      )}>\n        <div className=\"grid grid-cols-2 gap-1 h-full\">\n          {Array.from({ length: 4 }).map((_, index) => (\n            <div key={index} className=\"flex items-center justify-center\">\n              {homeTokens[index] && (\n                <Token\n                  token={homeTokens[index]}\n                  onClick={() => onTokenClick(player.id, homeTokens[index].id)}\n                  isSelected={\n                    selectedToken?.playerId === player.id &&\n                    selectedToken?.tokenId === homeTokens[index].id\n                  }\n                  isMovable={movableTokens.some(\n                    mt => mt.playerId === player.id && mt.tokenId === homeTokens[index].id\n                  )}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const renderPathCell = (index: number) => {\n    const tokensOnCell = players.flatMap(player =>\n      player.tokens\n        .filter(token => token.position === index)\n        .map(token => ({ ...token, playerId: player.id }))\n    );\n\n    const isSafeCell = [0, 8, 13, 21, 26, 34, 39, 47].includes(index);\n\n    return (\n      <div\n        key={index}\n        className={cn(\n          'w-8 h-8 border border-gray-300 flex items-center justify-center relative',\n          isSafeCell && 'bg-yellow-100 border-yellow-400'\n        )}\n      >\n        {tokensOnCell.length > 0 && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            {tokensOnCell.length === 1 ? (\n              <Token\n                token={tokensOnCell[0]}\n                onClick={() => onTokenClick(tokensOnCell[0].playerId, tokensOnCell[0].id)}\n                isSelected={\n                  selectedToken?.playerId === tokensOnCell[0].playerId &&\n                  selectedToken?.tokenId === tokensOnCell[0].id\n                }\n                isMovable={movableTokens.some(\n                  mt => mt.playerId === tokensOnCell[0].playerId && mt.tokenId === tokensOnCell[0].id\n                )}\n              />\n            ) : (\n              <div className=\"text-xs font-bold\">{tokensOnCell.length}</div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderHomeStretch = (color: PlayerColor) => {\n    const player = players.find(p => p.color === color);\n    if (!player) return null;\n\n    return (\n      <div className={cn('flex', color === 'red' || color === 'yellow' ? 'flex-col' : 'flex-row')}>\n        {Array.from({ length: 6 }).map((_, index) => {\n          const stretchPosition = 52 + (player.id * 6) + index;\n          const tokensOnCell = player.tokens.filter(token => token.position === stretchPosition);\n\n          return (\n            <div\n              key={index}\n              className={cn(\n                'w-8 h-8 border border-gray-300 flex items-center justify-center',\n                homeColors[color]\n              )}\n            >\n              {tokensOnCell.length > 0 && (\n                <Token\n                  token={tokensOnCell[0]}\n                  onClick={() => onTokenClick(player.id, tokensOnCell[0].id)}\n                  isSelected={\n                    selectedToken?.playerId === player.id &&\n                    selectedToken?.tokenId === tokensOnCell[0].id\n                  }\n                  isMovable={movableTokens.some(\n                    mt => mt.playerId === player.id && mt.tokenId === tokensOnCell[0].id\n                  )}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow-lg\">\n      <div className=\"grid grid-cols-15 gap-0 w-fit mx-auto\">\n        {/* Top section */}\n        <div className=\"col-span-6 grid grid-cols-6\">\n          {Array.from({ length: 6 }).map((_, i) => renderPathCell(i))}\n        </div>\n        <div className=\"col-span-3 flex items-center justify-center\">\n          {renderHomeArea('green', 'top-left')}\n        </div>\n        <div className=\"col-span-6 grid grid-cols-6\">\n          {Array.from({ length: 6 }).map((_, i) => renderPathCell(i + 6))}\n        </div>\n\n        {/* Middle section */}\n        <div className=\"col-span-6 flex flex-col\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"flex\">\n              {Array.from({ length: 6 }).map((_, j) => renderPathCell(47 - i * 6 - j))}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"col-span-3 grid grid-cols-3 gap-1\">\n          <div>{renderHomeArea('red', 'top-left')}</div>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center\">\n              <span className=\"text-2xl font-bold text-gray-600\">🏠</span>\n            </div>\n          </div>\n          <div>{renderHomeArea('blue', 'top-right')}</div>\n          \n          <div className=\"flex items-center justify-center\">{renderHomeStretch('red')}</div>\n          <div></div>\n          <div className=\"flex items-center justify-center\">{renderHomeStretch('blue')}</div>\n          \n          <div>{renderHomeArea('yellow', 'bottom-left')}</div>\n          <div className=\"flex items-center justify-center\">{renderHomeStretch('yellow')}</div>\n          <div>{renderHomeArea('green', 'bottom-right')}</div>\n        </div>\n\n        <div className=\"col-span-6 flex flex-col\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"flex\">\n              {Array.from({ length: 6 }).map((_, j) => renderPathCell(13 + i * 6 + j))}\n            </div>\n          ))}\n        </div>\n\n        {/* Bottom section */}\n        <div className=\"col-span-6 grid grid-cols-6\">\n          {Array.from({ length: 6 }).map((_, i) => renderPathCell(31 + i))}\n        </div>\n        <div className=\"col-span-3 flex items-center justify-center\">\n          {renderHomeStretch('green')}\n        </div>\n        <div className=\"col-span-6 grid grid-cols-6\">\n          {Array.from({ length: 6 }).map((_, i) => renderPathCell(37 + i))}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 768, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/player-panel.tsx"],"sourcesContent":["'use client';\n\nimport { Player, PlayerColor } from '@/lib/game-state';\nimport { cn } from '@/lib/utils';\n\ninterface PlayerPanelProps {\n  players: Player[];\n  currentPlayerIndex: number;\n  diceValue: number;\n}\n\nconst playerColorClasses: Record<PlayerColor, string> = {\n  red: 'bg-red-500 text-white',\n  blue: 'bg-blue-500 text-white',\n  green: 'bg-green-500 text-white',\n  yellow: 'bg-yellow-500 text-white',\n};\n\nconst playerBorderClasses: Record<PlayerColor, string> = {\n  red: 'border-red-500',\n  blue: 'border-blue-500',\n  green: 'border-green-500',\n  yellow: 'border-yellow-500',\n};\n\nexport function PlayerPanel({ players, currentPlayerIndex, diceValue }: PlayerPanelProps) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-4\">\n      <h2 className=\"text-xl font-bold text-center mb-4\">Players</h2>\n      \n      <div className=\"space-y-3\">\n        {players.map((player, index) => {\n          const isCurrentPlayer = index === currentPlayerIndex;\n          const tokensAtHome = player.tokens.filter(token => token.position === -1).length;\n          const tokensOnBoard = player.tokens.filter(token => token.position >= 0 && !token.isHome).length;\n          const tokensFinished = player.tokens.filter(token => token.isHome).length;\n\n          return (\n            <div\n              key={player.id}\n              className={cn(\n                'p-3 rounded-lg border-2 transition-all duration-200',\n                isCurrentPlayer \n                  ? `${playerBorderClasses[player.color]} bg-gray-50` \n                  : 'border-gray-200'\n              )}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-2\">\n                  <div\n                    className={cn(\n                      'w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold',\n                      playerColorClasses[player.color]\n                    )}\n                  >\n                    {player.name.charAt(0)}\n                  </div>\n                  <span className=\"font-semibold\">{player.name}</span>\n                  {isCurrentPlayer && (\n                    <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full\">\n                      Current Turn\n                    </span>\n                  )}\n                </div>\n                \n                {isCurrentPlayer && diceValue > 0 && (\n                  <div className=\"text-sm font-bold bg-gray-100 px-2 py-1 rounded\">\n                    Rolled: {diceValue}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-gray-600\">Home</div>\n                  <div className=\"text-lg font-bold\">{tokensAtHome}</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-gray-600\">Playing</div>\n                  <div className=\"text-lg font-bold\">{tokensOnBoard}</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-semibold text-gray-600\">Finished</div>\n                  <div className=\"text-lg font-bold\">{tokensFinished}</div>\n                </div>\n              </div>\n\n              {/* Token status indicators */}\n              <div className=\"flex gap-1 mt-2 justify-center\">\n                {player.tokens.map((token) => (\n                  <div\n                    key={token.id}\n                    className={cn(\n                      'w-3 h-3 rounded-full border',\n                      token.isHome \n                        ? 'bg-green-400 border-green-600' \n                        : token.position >= 0 \n                        ? `${playerColorClasses[player.color]} opacity-80`\n                        : 'bg-gray-300 border-gray-400'\n                    )}\n                    title={\n                      token.isHome \n                        ? 'Finished' \n                        : token.position >= 0 \n                        ? `Position: ${token.position}`\n                        : 'At home'\n                    }\n                  />\n                ))}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAWA,MAAM,qBAAkD;IACtD,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;AACV;AAEA,MAAM,sBAAmD;IACvD,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;AACV;AAEO,SAAS,YAAY,EAAE,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAoB;IACtF,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAqC;;;;;;0BAEnD,6LAAC;gBAAI,WAAU;0BACZ,QAAQ,GAAG,CAAC,CAAC,QAAQ;oBACpB,MAAM,kBAAkB,UAAU;oBAClC,MAAM,eAAe,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,QAAS,MAAM,QAAQ,KAAK,CAAC,GAAG,MAAM;oBAChF,MAAM,gBAAgB,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,QAAS,MAAM,QAAQ,IAAI,KAAK,CAAC,MAAM,MAAM,EAAE,MAAM;oBAChG,MAAM,iBAAiB,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,QAAS,MAAM,MAAM,EAAE,MAAM;oBAEzE,qBACE,6LAAC;wBAEC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uDACA,kBACI,GAAG,mBAAmB,CAAC,OAAO,KAAK,CAAC,CAAC,WAAW,CAAC,GACjD;;0CAGN,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2EACA,kBAAkB,CAAC,OAAO,KAAK,CAAC;0DAGjC,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;0DAEtB,6LAAC;gDAAK,WAAU;0DAAiB,OAAO,IAAI;;;;;;4CAC3C,iCACC,6LAAC;gDAAK,WAAU;0DAA6D;;;;;;;;;;;;oCAMhF,mBAAmB,YAAY,mBAC9B,6LAAC;wCAAI,WAAU;;4CAAkD;4CACtD;;;;;;;;;;;;;0CAKf,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAA8B;;;;;;0DAC7C,6LAAC;gDAAI,WAAU;0DAAqB;;;;;;;;;;;;kDAEtC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAA8B;;;;;;0DAC7C,6LAAC;gDAAI,WAAU;0DAAqB;;;;;;;;;;;;kDAEtC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAA8B;;;;;;0DAC7C,6LAAC;gDAAI,WAAU;0DAAqB;;;;;;;;;;;;;;;;;;0CAKxC,6LAAC;gCAAI,WAAU;0CACZ,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,sBAClB,6LAAC;wCAEC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+BACA,MAAM,MAAM,GACR,kCACA,MAAM,QAAQ,IAAI,IAClB,GAAG,kBAAkB,CAAC,OAAO,KAAK,CAAC,CAAC,WAAW,CAAC,GAChD;wCAEN,OACE,MAAM,MAAM,GACR,aACA,MAAM,QAAQ,IAAI,IAClB,CAAC,UAAU,EAAE,MAAM,QAAQ,EAAE,GAC7B;uCAdD,MAAM,EAAE;;;;;;;;;;;uBApDd,OAAO,EAAE;;;;;gBAyEpB;;;;;;;;;;;;AAIR;KA3FgB","debugId":null}},
    {"offset": {"line": 993, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/dice.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface DiceProps {\n  value: number;\n  isRolling: boolean;\n  onRoll: () => void;\n  disabled?: boolean;\n}\n\nconst DiceFace = ({ value }: { value: number }) => {\n  const getDotPositions = (num: number) => {\n    const positions = {\n      1: ['center'],\n      2: ['top-left', 'bottom-right'],\n      3: ['top-left', 'center', 'bottom-right'],\n      4: ['top-left', 'top-right', 'bottom-left', 'bottom-right'],\n      5: ['top-left', 'top-right', 'center', 'bottom-left', 'bottom-right'],\n      6: ['top-left', 'top-right', 'middle-left', 'middle-right', 'bottom-left', 'bottom-right'],\n    };\n    return positions[num as keyof typeof positions] || [];\n  };\n\n  const dotPositions = getDotPositions(value);\n\n  return (\n    <div className=\"relative w-12 h-12 grid grid-cols-3 grid-rows-3 gap-1 p-1\">\n      {Array.from({ length: 9 }).map((_, index) => {\n        const positions = [\n          'top-left', 'top-center', 'top-right',\n          'middle-left', 'center', 'middle-right',\n          'bottom-left', 'bottom-center', 'bottom-right'\n        ];\n        const position = positions[index];\n        const shouldShow = dotPositions.includes(position);\n        \n        return (\n          <div\n            key={index}\n            className={cn(\n              'w-2 h-2 rounded-full transition-all duration-200',\n              shouldShow ? 'bg-gray-800' : 'bg-transparent'\n            )}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport function Dice({ value, isRolling, onRoll, disabled }: DiceProps) {\n  const [displayValue, setDisplayValue] = useState(value);\n\n  useEffect(() => {\n    if (isRolling) {\n      const interval = setInterval(() => {\n        setDisplayValue(Math.floor(Math.random() * 6) + 1);\n      }, 100);\n      \n      setTimeout(() => {\n        clearInterval(interval);\n        setDisplayValue(value);\n      }, 1000);\n\n      return () => clearInterval(interval);\n    } else {\n      setDisplayValue(value);\n    }\n  }, [isRolling, value]);\n\n  return (\n    <button\n      onClick={onRoll}\n      disabled={disabled || isRolling}\n      className={cn(\n        'w-16 h-16 bg-white rounded-lg shadow-lg border-2 border-gray-300',\n        'flex items-center justify-center transition-all duration-200',\n        'hover:shadow-xl active:scale-95',\n        'disabled:opacity-50 disabled:cursor-not-allowed',\n        isRolling && 'animate-bounce'\n      )}\n      aria-label=\"Roll dice\"\n    >\n      <DiceFace value={displayValue} />\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAYA,MAAM,WAAW,CAAC,EAAE,KAAK,EAAqB;IAC5C,MAAM,kBAAkB,CAAC;QACvB,MAAM,YAAY;YAChB,GAAG;gBAAC;aAAS;YACb,GAAG;gBAAC;gBAAY;aAAe;YAC/B,GAAG;gBAAC;gBAAY;gBAAU;aAAe;YACzC,GAAG;gBAAC;gBAAY;gBAAa;gBAAe;aAAe;YAC3D,GAAG;gBAAC;gBAAY;gBAAa;gBAAU;gBAAe;aAAe;YACrE,GAAG;gBAAC;gBAAY;gBAAa;gBAAe;gBAAgB;gBAAe;aAAe;QAC5F;QACA,OAAO,SAAS,CAAC,IAA8B,IAAI,EAAE;IACvD;IAEA,MAAM,eAAe,gBAAgB;IAErC,qBACE,6LAAC;QAAI,WAAU;kBACZ,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAE,GAAG,GAAG,CAAC,CAAC,GAAG;YACjC,MAAM,YAAY;gBAChB;gBAAY;gBAAc;gBAC1B;gBAAe;gBAAU;gBACzB;gBAAe;gBAAiB;aACjC;YACD,MAAM,WAAW,SAAS,CAAC,MAAM;YACjC,MAAM,aAAa,aAAa,QAAQ,CAAC;YAEzC,qBACE,6LAAC;gBAEC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oDACA,aAAa,gBAAgB;eAH1B;;;;;QAOX;;;;;;AAGN;KAtCM;AAwCC,SAAS,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAa;;IACpE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,IAAI,WAAW;gBACb,MAAM,WAAW;+CAAY;wBAC3B,gBAAgB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK;oBAClD;8CAAG;gBAEH;sCAAW;wBACT,cAAc;wBACd,gBAAgB;oBAClB;qCAAG;gBAEH;sCAAO,IAAM,cAAc;;YAC7B,OAAO;gBACL,gBAAgB;YAClB;QACF;yBAAG;QAAC;QAAW;KAAM;IAErB,qBACE,6LAAC;QACC,SAAS;QACT,UAAU,YAAY;QACtB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oEACA,gEACA,mCACA,mDACA,aAAa;QAEf,cAAW;kBAEX,cAAA,6LAAC;YAAS,OAAO;;;;;;;;;;;AAGvB;GApCgB;MAAA","debugId":null}},
    {"offset": {"line": 1137, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 1200, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/game-controls.tsx"],"sourcesContent":["'use client';\n\nimport { PlayerColor } from '@/lib/game-state';\nimport { Dice } from './dice';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface GameControlsProps {\n  diceValue: number;\n  isRolling: boolean;\n  onRollDice: () => void;\n  onResetGame: () => void;\n  gameStarted: boolean;\n  winner: PlayerColor | null;\n  currentPlayerName: string;\n  canRoll: boolean;\n}\n\nconst winnerColors: Record<PlayerColor, string> = {\n  red: 'text-red-600',\n  blue: 'text-blue-600',\n  green: 'text-green-600',\n  yellow: 'text-yellow-600',\n};\n\nexport function GameControls({\n  diceValue,\n  isRolling,\n  onRollDice,\n  onResetGame,\n  gameStarted,\n  winner,\n  currentPlayerName,\n  canRoll,\n}: GameControlsProps) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      <div className=\"text-center space-y-4\">\n        {winner ? (\n          <div className=\"space-y-4\">\n            <div className=\"text-2xl font-bold\">🎉 Game Over! 🎉</div>\n            <div className={cn('text-xl font-semibold', winnerColors[winner])}>\n              {winner.charAt(0).toUpperCase() + winner.slice(1)} Wins!\n            </div>\n            <Button \n              onClick={onResetGame}\n              className=\"w-full bg-green-600 hover:bg-green-700\"\n            >\n              Play Again\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {!gameStarted ? (\n              <div className=\"space-y-4\">\n                <h2 className=\"text-2xl font-bold text-gray-800\">Ludo Game</h2>\n                <p className=\"text-gray-600\">Roll the dice to start playing!</p>\n                <Dice\n                  value={diceValue || 1}\n                  isRolling={isRolling}\n                  onRoll={onRollDice}\n                  disabled={false}\n                />\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"text-lg font-semibold text-gray-800\">\n                  {currentPlayerName}'s Turn\n                </div>\n                \n                <Dice\n                  value={diceValue || 1}\n                  isRolling={isRolling}\n                  onRoll={onRollDice}\n                  disabled={!canRoll || isRolling}\n                />\n                \n                {diceValue > 0 && !isRolling && (\n                  <div className=\"text-sm text-gray-600\">\n                    {canRoll ? 'Click a token to move' : 'No valid moves available'}\n                  </div>\n                )}\n                \n                <div className=\"space-y-2\">\n                  <Button \n                    onClick={onResetGame}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    Reset Game\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {gameStarted && !winner && (\n          <div className=\"text-xs text-gray-500 space-y-1\">\n            <div>• Roll 6 to move tokens out of home</div>\n            <div>• Land on opponents to send them home</div>\n            <div>• Get all tokens to the center to win</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AALA;;;;;AAkBA,MAAM,eAA4C;IAChD,KAAK;IACL,MAAM;IACN,OAAO;IACP,QAAQ;AACV;AAEO,SAAS,aAAa,EAC3B,SAAS,EACT,SAAS,EACT,UAAU,EACV,WAAW,EACX,WAAW,EACX,MAAM,EACN,iBAAiB,EACjB,OAAO,EACW;IAClB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;gBACZ,uBACC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCAAqB;;;;;;sCACpC,6LAAC;4BAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,yBAAyB,YAAY,CAAC,OAAO;;gCAC7D,OAAO,MAAM,CAAC,GAAG,WAAW,KAAK,OAAO,KAAK,CAAC;gCAAG;;;;;;;sCAEpD,6LAAC,qIAAA,CAAA,SAAM;4BACL,SAAS;4BACT,WAAU;sCACX;;;;;;;;;;;yCAKH,6LAAC;oBAAI,WAAU;8BACZ,CAAC,4BACA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAmC;;;;;;0CACjD,6LAAC;gCAAE,WAAU;0CAAgB;;;;;;0CAC7B,6LAAC,6HAAA,CAAA,OAAI;gCACH,OAAO,aAAa;gCACpB,WAAW;gCACX,QAAQ;gCACR,UAAU;;;;;;;;;;;6CAId,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;oCACZ;oCAAkB;;;;;;;0CAGrB,6LAAC,6HAAA,CAAA,OAAI;gCACH,OAAO,aAAa;gCACpB,WAAW;gCACX,QAAQ;gCACR,UAAU,CAAC,WAAW;;;;;;4BAGvB,YAAY,KAAK,CAAC,2BACjB,6LAAC;gCAAI,WAAU;0CACZ,UAAU,0BAA0B;;;;;;0CAIzC,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC,qIAAA,CAAA,SAAM;oCACL,SAAS;oCACT,SAAQ;oCACR,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;gBASV,eAAe,CAAC,wBACf,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;sCAAI;;;;;;sCACL,6LAAC;sCAAI;;;;;;sCACL,6LAAC;sCAAI;;;;;;;;;;;;;;;;;;;;;;;AAMjB;KAlFgB","debugId":null}},
    {"offset": {"line": 1410, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useLudoGame } from '@/hooks/use-ludo-game';\nimport { LudoBoard } from '@/components/ludo-board';\nimport { PlayerPanel } from '@/components/player-panel';\nimport { GameControls } from '@/components/game-controls';\n\nexport default function LudoGamePage() {\n  const {\n    gameState,\n    selectedToken,\n    movableTokens,\n    rollDice,\n    handleTokenClick,\n    resetGame,\n  } = useLudoGame();\n\n  const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n  const canRoll = gameState.diceValue === 0 && !gameState.isRolling && !gameState.winner;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-6\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Ludo Game</h1>\n          <p className=\"text-gray-600\">Classic board game for 2-4 players</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Game Board - Takes up most space */}\n          <div className=\"lg:col-span-3 flex justify-center\">\n            <LudoBoard\n              players={gameState.players}\n              onTokenClick={handleTokenClick}\n              selectedToken={selectedToken}\n              movableTokens={movableTokens}\n            />\n          </div>\n\n          {/* Side Panel */}\n          <div className=\"lg:col-span-1 space-y-4\">\n            {/* Game Controls */}\n            <GameControls\n              diceValue={gameState.diceValue}\n              isRolling={gameState.isRolling}\n              onRollDice={rollDice}\n              onResetGame={resetGame}\n              gameStarted={gameState.gameStarted}\n              winner={gameState.winner}\n              currentPlayerName={currentPlayer?.name || ''}\n              canRoll={canRoll}\n            />\n\n            {/* Player Panel */}\n            <PlayerPanel\n              players={gameState.players}\n              currentPlayerIndex={gameState.currentPlayerIndex}\n              diceValue={gameState.diceValue}\n            />\n          </div>\n        </div>\n\n        {/* Game Instructions */}\n        <div className=\"mt-8 bg-white rounded-lg shadow-lg p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">How to Play</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n            <div>\n              <h4 className=\"font-semibold text-gray-800 mb-2\">Basic Rules:</h4>\n              <ul className=\"space-y-1\">\n                <li>• Roll a 6 to move tokens out of home</li>\n                <li>• Move tokens clockwise around the board</li>\n                <li>• Land on opponents to send them home</li>\n                <li>• Safe squares protect your tokens</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-gray-800 mb-2\">Winning:</h4>\n              <ul className=\"space-y-1\">\n                <li>• Get all 4 tokens to the center</li>\n                <li>• Tokens must enter the home stretch</li>\n                <li>• Exact count needed to reach home</li>\n                <li>• First player to finish wins!</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AAOe,SAAS;;IACtB,MAAM,EACJ,SAAS,EACT,aAAa,EACb,aAAa,EACb,QAAQ,EACR,gBAAgB,EAChB,SAAS,EACV,GAAG,CAAA,GAAA,sIAAA,CAAA,cAAW,AAAD;IAEd,MAAM,gBAAgB,UAAU,OAAO,CAAC,UAAU,kBAAkB,CAAC;IACrE,MAAM,UAAU,UAAU,SAAS,KAAK,KAAK,CAAC,UAAU,SAAS,IAAI,CAAC,UAAU,MAAM;IAEtF,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAwC;;;;;;sCACtD,6LAAC;4BAAE,WAAU;sCAAgB;;;;;;;;;;;;8BAG/B,6LAAC;oBAAI,WAAU;;sCAEb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC,sIAAA,CAAA,YAAS;gCACR,SAAS,UAAU,OAAO;gCAC1B,cAAc;gCACd,eAAe;gCACf,eAAe;;;;;;;;;;;sCAKnB,6LAAC;4BAAI,WAAU;;8CAEb,6LAAC,yIAAA,CAAA,eAAY;oCACX,WAAW,UAAU,SAAS;oCAC9B,WAAW,UAAU,SAAS;oCAC9B,YAAY;oCACZ,aAAa;oCACb,aAAa,UAAU,WAAW;oCAClC,QAAQ,UAAU,MAAM;oCACxB,mBAAmB,eAAe,QAAQ;oCAC1C,SAAS;;;;;;8CAIX,6LAAC,wIAAA,CAAA,cAAW;oCACV,SAAS,UAAU,OAAO;oCAC1B,oBAAoB,UAAU,kBAAkB;oCAChD,WAAW,UAAU,SAAS;;;;;;;;;;;;;;;;;;8BAMpC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAA6B;;;;;;sCAC3C,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDAAmC;;;;;;sDACjD,6LAAC;4CAAG,WAAU;;8DACZ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;;;;;;;;;;;;;8CAGR,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDAAmC;;;;;;sDACjD,6LAAC;4CAAG,WAAU;;8DACZ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;8DACJ,6LAAC;8DAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQpB;GAlFwB;;QAQlB,sIAAA,CAAA,cAAW;;;KARO","debugId":null}}]
}